<?xml version="1.0" ?>
<sdf version="1.7">
    <world name="block_world">
        <physics name="1ms" type="ignored">
            <max_step_size>0.001</max_step_size>
            <real_time_factor>1.0</real_time_factor>
        </physics>
        <!--plugins to make the simulation work-->
        <plugin
            filename="libignition-gazebo-physics-system.so"
            name="ignition::gazebo::systems::Physics">
        </plugin>
        <plugin
            filename="libignition-gazebo-user-commands-system.so"
            name="ignition::gazebo::systems::UserCommands">
        </plugin>
        <plugin
            filename="libignition-gazebo-scene-broadcaster-system.so"
            name="ignition::gazebo::systems::SceneBroadcaster">
        </plugin>
        <!--Sensor plugins-->
        <plugin filename="libignition-gazebo-imu-system.so"
            name="ignition::gazebo::systems::Imu">
        </plugin>
        <plugin
            filename="libignition-gazebo-sensors-system.so"
            name="ignition::gazebo::systems::Sensors">
            <render_engine>ogre2</render_engine>
        </plugin>
        <!--plugin to allow me to do basic movement of the robot through one command on the command line
        type ign topic -t /topic -m igntiion.msgs.Empty -p " " to move the robot-->
        <plugin filename="libignition-gazebo-triggered-publisher-system.so"
            name="ignition::gazebo::systems::TriggeredPublisher">
            <input type="ignition.msgs.Empty" topic="/start"/>
            <output type="ignition.msgs.Twist" topic="/robot_vel">
            <!--straight component and turning component of the robot's movement-->
             linear: {x: 0.5}, angular: {z: 0.5}
            </output>
        </plugin>
        <!--import robot file-->
        <include>
            <uri>
                model://X1
            </uri>
        <!--block creation-->
        </include>
        <model name="box">
            <!--position-->
            <pose> 6 0 2.5 0 0 0</pose>
            <!--static, not going to move if pushed-->
            <static>true</static>
            <!--define the box-->
            <link name="link">
                <!--interacts with other objects as a 5,5,5 m box-->
                <collision name="collision">
                    <geometry>
                        <box>
                            <size>5 5 5</size>
                        </box>
                    </geometry>
                </collision>
                <visual name="visual">
                    <!--visual of the box is 5,5,5 m box-->
                    <geometry>
                        <box>
                            <size>5 5 5</size>
                        </box>
                    </geometry>
                    <!--color-->
                    <material>
                        <ambient>0.1 0.1 0.1 1</ambient>
                        <diffuse>0.1 0.1 0.1 1</diffuse>
                        <specular>0.1 0.1 0.1 1</specular>
                    </material>
                </visual>
            </link>
        </model>
        <!--ground plane for everything to rest on-->
        <model name="ground_plane">
            <pose>0 0 0 0 0 0</pose>
            <static>true</static>
            <link name="link">
                <collision name="collision">
                    <!--define the plane deminsions and direction as normal to z vector (along x,y axis)-->
                    <geometry>
                        <plane>
                            <normal>0 0 1</normal>
                            <size>100 100</size>
                        </plane>
                    </geometry>
                    <!--set friction to a high value so friction is only dependent on robot friction values-->
                    <surface>
                        <friction>
                            <ode>
                                <mu>100</mu>
                                <mu2>50</mu2>
                            </ode>
                        </friction>
                    </surface>
                </collision>
                <visual name="visual">
                    <geometry>
                        <plane>
                            <normal>0 0 1</normal>
                            <size>100 100</size>
                        </plane>
                    </geometry>
                    <!--color of ground plane-->
                    <material>
                        <ambient>0.25 0.25 0.25 0.75</ambient>
                        <diffuse>0.25 0.25 0.25 0.75</diffuse>
                        <specular>0.25 0.25 0.25 0.75</specular>
                    </material>
                </visual>
            </link>
        </model>
    </world>
</sdf>